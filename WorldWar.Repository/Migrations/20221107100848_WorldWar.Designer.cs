// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldWar.Repository.Internal;

#nullable disable

namespace WorldWar.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221107100848_WorldWar")]
    partial class WorldWar
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WorldWar.Abstractions.DTOs.ItemDto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("WorldWar.Abstractions.DTOs.LootDto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ItemIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Loots");
                });

            modelBuilder.Entity("WorldWar.Abstractions.DTOs.UnitDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BodyProtectionId")
                        .HasColumnType("int");

                    b.Property<int>("HeadProtectionId")
                        .HasColumnType("int");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<int>("LootId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BodyProtectionId");

                    b.HasIndex("HeadProtectionId");

                    b.HasIndex("LootId");

                    b.HasIndex("WeaponId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("WorldWar.Repository.Models.WorldWarIdentity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WorldWar.Abstractions.DTOs.BodyProtectionDto", b =>
                {
                    b.HasBaseType("WorldWar.Abstractions.DTOs.ItemDto");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.ToTable("BodyProtections");

                    b.HasData(
                        new
                        {
                            Id = 2000,
                            IconPath = "protections/body/wifeBeater.png",
                            ItemType = 2,
                            Name = "Wife-beater",
                            Defense = 0
                        },
                        new
                        {
                            Id = 2001,
                            IconPath = "protections/body/waistcoat.png",
                            ItemType = 2,
                            Name = "Waistcoat",
                            Defense = 0
                        });
                });

            modelBuilder.Entity("WorldWar.Abstractions.DTOs.FoodDto", b =>
                {
                    b.HasBaseType("WorldWar.Abstractions.DTOs.ItemDto");

                    b.Property<int>("Benefit")
                        .HasColumnType("int");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("WorldWar.Abstractions.DTOs.HeadProtectionDto", b =>
                {
                    b.HasBaseType("WorldWar.Abstractions.DTOs.ItemDto");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.ToTable("HeadProtections");

                    b.HasData(
                        new
                        {
                            Id = 3000,
                            IconPath = "protections/head/bandana.png",
                            ItemType = 3,
                            Name = "Bandana",
                            Defense = 0
                        },
                        new
                        {
                            Id = 3001,
                            IconPath = "protections/head/cap.png",
                            ItemType = 3,
                            Name = "Cap",
                            Defense = 0
                        });
                });

            modelBuilder.Entity("WorldWar.Abstractions.DTOs.WeaponDto", b =>
                {
                    b.HasBaseType("WorldWar.Abstractions.DTOs.ItemDto");

                    b.Property<int>("Accuracy")
                        .HasColumnType("int");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("DelayShot")
                        .HasColumnType("time");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<int>("MagazineSize")
                        .HasColumnType("int");

                    b.Property<string>("ReloadSoundLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("ReloadTime")
                        .HasColumnType("time");

                    b.Property<string>("ShotSoundLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeaponType")
                        .HasColumnType("int");

                    b.ToTable("Weapons");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            IconPath = "weapons\\TT\\TT.png",
                            ItemType = 1,
                            Name = "TT",
                            Accuracy = 20,
                            Damage = 100,
                            DelayShot = new TimeSpan(0, 0, 0, 0, 800),
                            Distance = 0.00076f,
                            MagazineSize = 8,
                            ReloadSoundLocation = "/weapons/TT/Reload.wav",
                            ReloadTime = new TimeSpan(0, 0, 0, 2, 800),
                            ShotSoundLocation = "/weapons/TT/Shoot.wav",
                            WeaponType = 1
                        },
                        new
                        {
                            Id = 1000,
                            IconPath = "weapons\\Fist\\Fist.png",
                            ItemType = 1,
                            Name = "Fist",
                            Accuracy = 100,
                            Damage = 10,
                            DelayShot = new TimeSpan(0, 0, 0, 0, 900),
                            Distance = 2E-05f,
                            MagazineSize = 1,
                            ReloadSoundLocation = "/weapons/Fist/Kick2.wav",
                            ReloadTime = new TimeSpan(0, 0, 0, 1, 500),
                            ShotSoundLocation = "/weapons/Fist/Kick.wav",
                            WeaponType = 0
                        },
                        new
                        {
                            Id = 1002,
                            IconPath = "weapons\\DesertEagle\\DesertEagle.png",
                            ItemType = 1,
                            Name = "Desert Eagle",
                            Accuracy = 20,
                            Damage = 200,
                            DelayShot = new TimeSpan(0, 0, 0, 1, 200),
                            Distance = 0.00152f,
                            MagazineSize = 7,
                            ReloadSoundLocation = "/weapons/DesertEagle/Reload.wav",
                            ReloadTime = new TimeSpan(0, 0, 0, 2, 800),
                            ShotSoundLocation = "/weapons/DesertEagle/Shoot.wav",
                            WeaponType = 1
                        },
                        new
                        {
                            Id = 1003,
                            IconPath = "weapons\\AK47\\AK47.png",
                            ItemType = 1,
                            Name = "AK-47",
                            Accuracy = 20,
                            Damage = 100,
                            DelayShot = new TimeSpan(0, 0, 0, 0, 600),
                            Distance = 0.0046f,
                            MagazineSize = 30,
                            ReloadSoundLocation = "/weapons/AK47/Reload.wav",
                            ReloadTime = new TimeSpan(0, 0, 0, 5, 0),
                            ShotSoundLocation = "/weapons/AK47/Shoot.wav",
                            WeaponType = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WorldWar.Repository.Models.WorldWarIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WorldWar.Repository.Models.WorldWarIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldWar.Repository.Models.WorldWarIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WorldWar.Repository.Models.WorldWarIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorldWar.Abstractions.DTOs.UnitDto", b =>
                {
                    b.HasOne("WorldWar.Abstractions.DTOs.BodyProtectionDto", "BodyProtection")
                        .WithMany()
                        .HasForeignKey("BodyProtectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldWar.Abstractions.DTOs.HeadProtectionDto", "HeadProtection")
                        .WithMany()
                        .HasForeignKey("HeadProtectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldWar.Abstractions.DTOs.LootDto", "Loot")
                        .WithMany()
                        .HasForeignKey("LootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldWar.Abstractions.DTOs.WeaponDto", "Weapon")
                        .WithMany()
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyProtection");

                    b.Navigation("HeadProtection");

                    b.Navigation("Loot");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("WorldWar.Abstractions.DTOs.BodyProtectionDto", b =>
                {
                    b.HasOne("WorldWar.Abstractions.DTOs.ItemDto", null)
                        .WithOne()
                        .HasForeignKey("WorldWar.Abstractions.DTOs.BodyProtectionDto", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorldWar.Abstractions.DTOs.FoodDto", b =>
                {
                    b.HasOne("WorldWar.Abstractions.DTOs.ItemDto", null)
                        .WithOne()
                        .HasForeignKey("WorldWar.Abstractions.DTOs.FoodDto", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorldWar.Abstractions.DTOs.HeadProtectionDto", b =>
                {
                    b.HasOne("WorldWar.Abstractions.DTOs.ItemDto", null)
                        .WithOne()
                        .HasForeignKey("WorldWar.Abstractions.DTOs.HeadProtectionDto", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorldWar.Abstractions.DTOs.WeaponDto", b =>
                {
                    b.HasOne("WorldWar.Abstractions.DTOs.ItemDto", null)
                        .WithOne()
                        .HasForeignKey("WorldWar.Abstractions.DTOs.WeaponDto", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
