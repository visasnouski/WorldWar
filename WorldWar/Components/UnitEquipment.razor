@using WorldWar.Core.Interfaces
@using WorldWar.Abstractions.Interfaces
@using WorldWar.Abstractions.Models
@using WorldWar.Abstractions.Models.Items.Base
@using WorldWar.Abstractions.Models.Units
@using WorldWar.Components.States
@using WorldWar.Core.Cache

@inject ICacheFactory CacheFactory
@inject IAuthUser AuthUser
@inject DraggableItem DraggableItem
@inject UnitEquipmentDialogState UnitEquipmentDialogState;

@implements IAsyncDisposable

<div class="modal show" role="dialog" style="pointer-events: none; display:@_modalDisplay" @ondrop="()=> _bodyEquipment?.ResetStyles()!" ondragover="event.preventDefault();">
	<div class="modal-dialog" role="document">
		<div class="modal-content" style="width: 120%">
			<div class="modal-header">
				<h5 class="modal-title">Equipment</h5>
				<span class="close" @onclick="@Save">&times;</span>
			</div>
			<BodyEquipment Unit="@_unit" @ref="_bodyEquipment"></BodyEquipment>
		</div>
	</div>
</div>

@code {
	private BodyEquipment? _bodyEquipment;
	private string _modalDisplay = "none;";
	private Unit? _unit;

	private IStorage<Box> _boxStorage = null!;
	private IStorage<Unit> _unitsStorage = null!;

	protected override void OnInitialized()
	{
		_boxStorage = CacheFactory.Create<Box>();
		_unitsStorage = CacheFactory.Create<Unit>();
		UnitEquipmentDialogState.OnChange += UnitEquipmentDialogStateOnChange();
	}

	private AsyncEventHandler UnitEquipmentDialogStateOnChange()
	{
		return async () => await Open();
	}

	[JSInvokable("Open")]
	public void Open(Guid guid)
	{
		if (!_unitsStorage.TryGetValue(guid, out _unit))
		{
			return;
		}
		_modalDisplay = "block;";
		StateHasChanged();
	}

	public async Task Open()
	{
		var user = await AuthUser.GetIdentity();
		if (!_unitsStorage.TryGetValue(user.GuidId, out _unit))
		{
			return;
		}
		_modalDisplay = "block;";
		StateHasChanged();
	}

	public Task Open(Unit unit)
	{
		_unit = unit ?? throw new ArgumentNullException(nameof(unit), "The Unit is not defined");
		_modalDisplay = "block;";
		StateHasChanged();

		return Task.CompletedTask;
	}

	public void Save()
	{
		_modalDisplay = "none";
		_unitsStorage.AddOrUpdate(_bodyEquipment!.Unit!.Id, _bodyEquipment!.Unit!);
		StateHasChanged();
	}

	private bool IsShow()
	{
		return _modalDisplay.Equals("block;", StringComparison.Ordinal);
	}

	public async ValueTask DisposeAsync()
	{
		UnitEquipmentDialogState.OnChange -= UnitEquipmentDialogStateOnChange();
		await Task.CompletedTask;
	}
}
