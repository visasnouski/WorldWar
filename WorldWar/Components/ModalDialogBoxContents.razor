@using WorldWar.Abstractions
@using WorldWar.Abstractions.Models.Items.Base
@using WorldWar.Abstractions.Models.Units
@using WorldWar.Core;
@using WorldWar.Core.Cache
@using WorldWar.Core.Interfaces

@inject ICacheFactory CacheFactory

<div class="modal show" role="dialog" style="position: fixed; display: @_modalDisplay" ondragover="event.preventDefault();">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Box contents</h5>
				<span class="close" @onclick="@Save">&times;</span>
			</div>
			<div class="wrapper">
				<div>
					<BoxContents Box="@_box" @ref="_boxContents"></BoxContents>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	private Box? _box;
	private BoxContents? _boxContents;
	private string _modalDisplay = "none;";

	private IStorage<Box> _boxStorage;
	private IStorage<Unit> _unitsStorage;

	protected override void OnInitialized()
	{
		_unitsStorage = CacheFactory.Create<Unit>();
		_boxStorage = CacheFactory.Create<Box>();
	}

	private void Save()
	{
		if (!_box!.Loot.Items.Any())
		{
			_boxStorage.Remove(_box.Id);
		}
		_modalDisplay = "none;";
		StateHasChanged();
	}

	[JSInvokable("Open")]
	public void Open(Guid boxId)
	{
		_box = _boxStorage.Get(boxId);
		_modalDisplay = "block;";
		StateHasChanged();
	}
}
