@using WorldWar.Abstractions.Interfaces
@using WorldWar.Abstractions.Models
@using WorldWar.Abstractions.Models.Items.Base
@using WorldWar.Abstractions.Models.Units
@using WorldWar.Components.States
@using WorldWar.Core.Cache
@using WorldWar.Core.Interfaces

@inject ICacheFactory CacheFactory
@inject IAuthUser AuthUser
@inject InteractStates InteractStates
@inject DraggableItem DraggableItem

@implements IAsyncDisposable

<div class="modal show" role="dialog" style="position: fixed; display: @_modalDisplay" ondragover="event.preventDefault();">
	<div class="modal-dialog" role="document">
		<div class="modal-content" style="width: 200%">
			<div class="modal-header">
				<h5 class="modal-title">BoxContents</h5>
				<span class="close" @onclick="@Save">&times;</span>
			</div>
			<div class="wrapper">
				<div style="width: 60%; float: left">
					<BodyEquipment Unit="@_unit" RemoveItemCallback="item => RemoveItem(_box!.Loot.Items,item)" @ref="_bodyEquipment"></BodyEquipment>
				</div>
				<div style="width: 40%; float: right">
					<BoxContents Box="@_box" Source="_unit?.Loot.Items" StateHasChangedCallback="BodyStateHasChanged" @ref="_boxContents"></BoxContents>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	private IStorage<Box> _boxStorage;
	private IStorage<Unit> _unitsStorage;

	private BodyEquipment? _bodyEquipment;
	private BoxContents? _boxContents;
	private string _modalDisplay = string.Empty;
	private Box? _box;
	private Unit? _unit;

	protected override void OnInitialized()
	{
		_unitsStorage = CacheFactory.Create<Unit>();
		_boxStorage = CacheFactory.Create<Box>();
		DraggableItem.OnChange += StateHasChanged;
		InteractStates.OnChange += InteractStatesOnChange();
	}

	private AsyncEventHandler InteractStatesOnChange()
	{
		return async () =>
		{
			await Open(InteractStates.Id, InteractStates.IsUnit);
			await InvokeAsync(StateHasChanged);
		};
	}

	public async Task Open(Guid id, bool isUnit = false)
	{
		if (isUnit)
		{
			var unit = _unitsStorage.Get(id);

			var trophies = new List<Item>(unit.Loot.Items)
			{
				unit.Weapon,
				unit.BodyProtection,
				unit.HeadProtection,
			};

			_box = new Box(Guid.NewGuid(), unit.Latitude, unit.Longitude, trophies, unit.Rotate);
			_boxStorage.Set(_box);
			_unitsStorage.Remove(unit);
		}
		else
		{
			_box = _boxStorage.Get(id);
		}

		var user = await AuthUser.GetIdentity();
		_unit = _unitsStorage.Get(user.GuidId);
		_modalDisplay = "block;";
	}

	private Task Test(DragEventArgs arg)
	{
		StateHasChanged();
		return Task.CompletedTask;
	}

	public void Save()
	{
		_modalDisplay = "none";
		_unitsStorage.Set(_unit!);
		if (!_box!.Loot.Items.Any())
		{
			_boxStorage.Remove(_box);
		}
		StateHasChanged();
	}

	public async ValueTask DisposeAsync()
	{
		DraggableItem.OnChange -= StateHasChanged;
		InteractStates.OnChange -= InteractStatesOnChange();

		await Task.CompletedTask;
	}

	private Task RemoveItem(ICollection<Item> items, Item itemToRemove)
	{
		items.Remove(itemToRemove);
		return Task.CompletedTask;
	}

	private Task HandleDrop()
	{
		_box!.Loot.Items.Add(DraggableItem.Value.Item!);
		_unit!.Loot.Items.Remove(DraggableItem.Value.Item!);
		StateHasChanged();
		return Task.CompletedTask;
	}

	private async Task BodyStateHasChanged()
	{
		await _bodyEquipment!.ResetStyles();
		StateHasChanged();
	}
}
